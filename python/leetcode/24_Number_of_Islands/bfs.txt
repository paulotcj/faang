class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        def bfs(grid, is_visit, i,j):
            m = len(grid)
            n = len(grid[0])

            layer = [(i,j)]
            while (layer):
                next_layer = []
                for i,j in layer:
                    if (i > 0 and grid[i-1][j] == '1' and not is_visit[i-1][j]):
                        is_visit[i-1][j] = True
                        next_layer.append((i-1,j))
                    if (i+1 < m and grid[i+1][j] == '1' and not is_visit[i+1][j]):
                        is_visit[i+1][j] = True
                        next_layer.append((i+1,j))
                    if (j > 0 and grid[i][j-1] == '1' and not is_visit[i][j-1]):
                        is_visit[i][j-1] = True
                        next_layer.append((i,j-1))
                    if (j+1 < n and grid[i][j+1] == '1' and not is_visit[i][j+1]):
                        is_visit[i][j+1] = True
                        next_layer.append((i,j+1))
                
                layer = next_layer
        
        m = len(grid)
        n = len(grid[0])

        is_visit = [[False for _ in range(n)] for _ in range(m)]
        cnt = 0
        for i in range(m):
            for j in range(n):
                if (grid[i][j] == '1' and not is_visit[i][j]):
                    is_visit[i][j] = True
                    bfs(grid, is_visit, i, j)
                    cnt += 1
        
        return cnt


